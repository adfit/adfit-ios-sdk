// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdFitSDK
import AVFoundation
import AVKit
@_exported import AdFitSDK
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import Foundation
import Foundation/*.Data*/
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
import zlib
@objc public protocol AdFitNativeAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdDidClickAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
}
@objc @_inheritsConvenienceInitializers final public class AdFitMediaView : UIKit.UIView {
  @objc weak final public var delegate: AdFitSDK.AdFitMediaViewDelegate?
  @objc final public var mediaType: AdFitSDK.AdFitMediaType {
    @objc get
  }
  @objc override final public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override final public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public enum AdFitMediaType : Swift.Int, Swift.CustomStringConvertible {
  case unknown = 0
  case image = 1
  case video = 2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class AdFitNativeAd : ObjectiveC.NSObject {
  @objc weak final public var delegate: AdFitSDK.AdFitNativeAdDelegate?
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc final public var mediaAspectRatio: CoreGraphics.CGFloat {
    @objc get
  }
  @objc final public var mediaType: AdFitSDK.AdFitMediaType {
    @objc get
  }
  @objc final public var keywords: Swift.String? {
    @objc get
  }
  @objc final public var title: Swift.String? {
    @objc get
  }
  @objc final public var body: Swift.String? {
    @objc get
  }
  @objc final public var profileName: Swift.String? {
    @objc get
  }
  @objc final public var callToAction: Swift.String? {
    @objc get
  }
  @objc final public let adUnitId: Swift.String?
  @objc final public var options: [Swift.String : Swift.String] {
    @objc get
  }
  @objc deinit
  @objc final public func bind(_ nativeAdView: UIKit.UIView)
  @objc final public func block()
  @objc override dynamic public init()
}
@objc public protocol AdFitNativeAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdLoaderDidReceiveAds(_ nativeAds: [AdFitSDK.AdFitNativeAd])
  @objc optional func nativeAdLoaderDidReceiveAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
  @objc optional func nativeAdLoaderDidFailToReceiveAd(_ nativeAdLoader: AdFitSDK.AdFitNativeAdLoader, error: Swift.Error)
}
@objc public enum AdFitVideoPlayPolicy : Swift.Int, Swift.CustomStringConvertible {
  case alwaysManualPlay = 0
  case alwaysAutoPlay = 1
  case autoPlayOnWifiOnly = 2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AdFitBannerAdViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func adViewDidReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
  @objc optional func adViewDidFailToReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView, error: Swift.Error)
  @objc optional func adViewDidClickAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
}
extension AVPlayerViewController {
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
}
@objc final public class AdFitBannerAdView : UIKit.UIView {
  @objc final public var clientId: Swift.String? {
    get
  }
  @objc final public var adUnitSize: Swift.String? {
    get
  }
  @objc weak final public var delegate: AdFitSDK.AdFitBannerAdViewDelegate?
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc override final public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override final public var clipsToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override final public var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public init(clientId: Swift.String, adUnitSize: Swift.String)
  @objc public init(clientId: Swift.String)
  @objc deinit
  @objc override final public func addSubview(_ view: UIKit.UIView)
  @objc final public func loadAd()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc @_inheritsConvenienceInitializers final public class AdFit : ObjectiveC.NSObject {
  @objc public static var videoPlayPolicy: AdFitSDK.AdFitVideoPlayPolicy
  @objc final public class func configInit()
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol AdFitMediaViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func mediaViewVideoDidPlay(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidPause(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidComplete(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidMute(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidUnmute(_ mediaView: AdFitSDK.AdFitMediaView)
}
@objc final public class AdFitNativeAdLoader : ObjectiveC.NSObject {
  @objc final public var ads: [AdFitSDK.AdFitNativeAd]
  @objc final public var firstAd: AdFitSDK.AdFitNativeAd? {
    @objc get
  }
  @objc weak final public var delegate: AdFitSDK.AdFitNativeAdLoaderDelegate?
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc final public var infoIconPosition: AdFitSDK.AdFitInfoIconPosition
  @objc final public var desiredMediaWidth: CoreGraphics.CGFloat
  @objc public init(clientId: Swift.String, count: Swift.Int = 1)
  @objc final public func loadAd()
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol AdFitNativeAdRenderable {
  @objc func adTitleLabel() -> UIKit.UILabel?
  @objc func adBodyLabel() -> UIKit.UILabel?
  @objc func adCallToActionButton() -> UIKit.UIButton?
  @objc func adProfileNameLabel() -> UIKit.UILabel?
  @objc func adProfileIconView() -> UIKit.UIImageView?
  @objc func adMediaView() -> AdFitSDK.AdFitMediaView?
}
@objc public enum AdFitInfoIconPosition : Swift.Int, Swift.CustomStringConvertible {
  case topLeft = 0
  case topRight = 1
  case bottomLeft = 2
  case bottomRight = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension AdFitSDK.AdFitMediaType : Swift.Equatable {}
extension AdFitSDK.AdFitMediaType : Swift.Hashable {}
extension AdFitSDK.AdFitMediaType : Swift.RawRepresentable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.Equatable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.Hashable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.RawRepresentable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.Equatable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.Hashable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.RawRepresentable {}
