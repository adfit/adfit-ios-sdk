// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef ADFITSDK_SWIFT_H
#define ADFITSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AdFitSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@interface AVPlayerViewController (SWIFT_EXTENSION(AdFitSDK))
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@end

enum AdFitVideoPlayPolicy : NSInteger;

/// SDK 전역 설정을 관리합니다.
SWIFT_CLASS("_TtC8AdFitSDK5AdFit")
@interface AdFit : NSObject
/// 비디오가 포함된 광고의 재생 정책을 설정합니다.<br>
/// 기본값은 <em>autoPlayOnWifiOnly</em> (Wi-Fi 연결시에만 자동재생) 입니다.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AdFitVideoPlayPolicy videoPlayPolicy;)
+ (enum AdFitVideoPlayPolicy)videoPlayPolicy SWIFT_WARN_UNUSED_RESULT;
+ (void)setVideoPlayPolicy:(enum AdFitVideoPlayPolicy)value;
+ (void)configInit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

@interface AdFit (SWIFT_EXTENSION(AdFitSDK))
+ (void)registerWithAppKey:(NSString * _Nonnull)appKey appUserId:(NSString * _Nonnull)appUserId;
+ (void)registerWithAccountId:(NSString * _Nonnull)accountId;
+ (void)unregister;
@end

@class NSCoder;

SWIFT_CLASS("_TtC8AdFitSDK11AdFitAdView")
@interface AdFitAdView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

@class AdFitMediaView;

/// 미디어 뷰에서 발생하는 비디오의 재생 및 사운드 관련 이벤트에 따른 사용자 지정 동작을 구현할 수 있습니다.
SWIFT_PROTOCOL("_TtP8AdFitSDK30AdFitMediaViewInternalDelegate_")
@protocol AdFitMediaViewInternalDelegate <NSObject>
@optional
/// 미디오 뷰에 표시된 듀레이션이 변경될 때마다 호출됩니다.
/// \param mediaView 음소거 해제된 비디오를 표시하고 있는 미디어 뷰 객체
///
- (void)mediaViewVideoDidDurationChange:(AdFitMediaView * _Nonnull)mediaView current:(NSTimeInterval)current total:(NSTimeInterval)total;
@end


@interface AdFitAdView (SWIFT_EXTENSION(AdFitSDK)) <AdFitMediaViewInternalDelegate>
- (void)mediaViewVideoDidDurationChange:(AdFitMediaView * _Nonnull)mediaView current:(NSTimeInterval)current total:(NSTimeInterval)total;
@end

@class UILabel;
@class UIButton;
@class UIImageView;

/// 네이티브 광고를 표시하기 위한 사용자 뷰 클래스를 구현할 때, <code>AdFitNativeAdRenderable</code> 프로토콜을 함께 구현해야 합니다.<br>
/// 이 프로토콜을 구현한 뷰 객체만이 <code>AdFitNativeAd.bind(_:)</code> 메서드를 통해 광고 데이터와 바인딩 될 수 있습니다.
SWIFT_PROTOCOL("_TtP8AdFitSDK23AdFitNativeAdRenderable_")
@protocol AdFitNativeAdRenderable
/// 광고 제목 텍스트를 표시할 <code>UILabel</code> 객체를 리턴하도록 구현하세요.
- (UILabel * _Nullable)adTitleLabel SWIFT_WARN_UNUSED_RESULT;
@optional
/// 광고 본문 텍스트를 표시할 <code>UILable</code> 객체를 리턴하도록 구현하세요.
- (UILabel * _Nullable)adBodyLabel SWIFT_WARN_UNUSED_RESULT;
@required
/// CTA(행동 유도) 버튼 텍스트를 표시할 <code>UIButton</code> 객체를 리턴하도록 구현하세요.
- (UIButton * _Nullable)adCallToActionButton SWIFT_WARN_UNUSED_RESULT;
/// 광고주 이름 텍스트를 표시할 <code>UILabel</code> 객체를 리턴하도록 구현하세요.
- (UILabel * _Nullable)adProfileNameLabel SWIFT_WARN_UNUSED_RESULT;
/// 광고주 아이콘 이미지를 표시할 <code>UIImageView</code> 객체를 리턴하도록 구현하세요.
- (UIImageView * _Nullable)adProfileIconView SWIFT_WARN_UNUSED_RESULT;
/// 광고의 미디어 요소(이미지, 비디오 등)를 표시할 <code>AdFitMediaView</code> 객체를 리턴하도록 구현하세요.
- (AdFitMediaView * _Nullable)adMediaView SWIFT_WARN_UNUSED_RESULT;
@optional
- (UIImageView * _Nullable)customInfoIconView SWIFT_WARN_UNUSED_RESULT;
@end


@interface AdFitAdView (SWIFT_EXTENSION(AdFitSDK)) <AdFitNativeAdRenderable>
- (UILabel * _Nullable)adTitleLabel SWIFT_WARN_UNUSED_RESULT;
- (UIButton * _Nullable)adCallToActionButton SWIFT_WARN_UNUSED_RESULT;
- (UILabel * _Nullable)adProfileNameLabel SWIFT_WARN_UNUSED_RESULT;
- (UIImageView * _Nullable)adProfileIconView SWIFT_WARN_UNUSED_RESULT;
- (AdFitMediaView * _Nullable)adMediaView SWIFT_WARN_UNUSED_RESULT;
- (UIImageView * _Nullable)customInfoIconView SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AdFitBannerAdViewDelegate;
@class UIViewController;

/// 배너 광고를 표시합니다.
SWIFT_CLASS("_TtC8AdFitSDK17AdFitBannerAdView")
@interface AdFitBannerAdView : UIView
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable clientId;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable adUnitSize;
/// 배너 광고 뷰의 delegate 객체.
@property (nonatomic, weak) id <AdFitBannerAdViewDelegate> _Nullable delegate;
/// 광고주 페이지를 표시할 때 사용될 부모 뷰 컨트롤러.<br>
/// 별도로 할당하지 않는 경우 SDK에서 자체적으로 가장 적당한 뷰 컨트롤러를 탐색하여 사용합니다.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// :nodoc:
@property (nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
/// :nodoc:
@property (nonatomic) BOOL clipsToBounds;
/// :nodoc:
@property (nonatomic) CGRect frame;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// 배너 광고 뷰를 초기화 합니다.
/// \param clientId 광고단위 ID
///
/// \param adUnitSize 배너 광고의 사이즈 문자열. “WIDTHxHEIGHT” 포맷으로 지정해야 함
///
///
/// returns:
/// <code>AdFitBannerAdView</code> 객체
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId adUnitSize:(NSString * _Nonnull)adUnitSize OBJC_DESIGNATED_INITIALIZER;
/// 배너 광고 뷰를 초기화 합니다.
/// \param clientId 광고단위 ID
///
///
/// returns:
/// <code>AdFitBannerAdView</code> 객체
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)addSubview:(UIView * _Nonnull)view;
/// 배너 광고를 요청합니다.
- (void)loadAd;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// 배너 광고 뷰에서 발생하는 광고 응답, 클릭 등의 이벤트에 따른 사용자 지정 동작을 구현할 수 있습니다.
SWIFT_PROTOCOL("_TtP8AdFitSDK25AdFitBannerAdViewDelegate_")
@protocol AdFitBannerAdViewDelegate <NSObject>
@optional
/// 배너 광고가 성공적으로 로드 되었을 때 호출됩니다.
/// \param bannerAdView 광고가 로드된 배너 광고 뷰 객체
///
- (void)adViewDidReceiveAd:(AdFitBannerAdView * _Nonnull)bannerAdView;
/// 배너 광고 로드에 실패한 경우 호출됩니다.
/// \param bannerAdView 광고 로드에 실패한 배너 광고 뷰 객체
///
/// \param error 광고 로드 실패의 원인이 된 에러 객체
///
- (void)adViewDidFailToReceiveAd:(AdFitBannerAdView * _Nonnull)bannerAdView error:(NSError * _Nonnull)error;
/// 배너 광고에서 사용자 클릭이 발생하였을 때 호출됩니다.<br>
/// 클릭에 의해 광고주 페이지가 전체 화면으로 노출되므로, 화면 전환시 필요한 동작이 있다면 이 메서드에 구현하세요.
/// \param bannerAdView 클릭 이벤트가 발생한 배너 광고 뷰 객체
///
- (void)adViewDidClickAd:(AdFitBannerAdView * _Nonnull)bannerAdView;
@end

/// 네이티브 광고에서 정보 아이콘(<img src="https://t1.daumcdn.net/adfit/image/d_i_m_201607.png" width="20" valign="middle">)을 표시할 위치.<br>
typedef SWIFT_ENUM(NSInteger, AdFitInfoIconPosition, open) {
/// 좌측 상단
  AdFitInfoIconPositionTopLeft = 0,
/// 우측 상단
  AdFitInfoIconPositionTopRight = 1,
/// 좌측 하단
  AdFitInfoIconPositionBottomLeft = 2,
/// 좌측 하단
  AdFitInfoIconPositionBottomRight = 3,
};

/// 광고에 포함된 미디어 요소의 타입.
typedef SWIFT_ENUM(NSInteger, AdFitMediaType, open) {
/// 알 수 없음. 일반적으로 광고 로드가 완료되지 않은 시점에 unknwon 값을 가집니다.
  AdFitMediaTypeUnknown = 0,
/// 이미지 타입
  AdFitMediaTypeImage = 1,
/// 비디오 타입
  AdFitMediaTypeVideo = 2,
/// 혼합
  AdFitMediaTypeMixed = 3,
/// 캐러셀
  AdFitMediaTypeCarousel = 4,
};

@protocol AdFitMediaViewDelegate;

/// 네이티브 광고의 미디어 요소(이미지, 비디오 등)를 표시합니다.
SWIFT_CLASS("_TtC8AdFitSDK14AdFitMediaView")
@interface AdFitMediaView : UIView
/// 미디어 뷰의 delegate 객체.
@property (nonatomic, weak) id <AdFitMediaViewDelegate> _Nullable delegate;
/// 현재 표시중인 미디어의 타입.<br>
/// 만약 표시중인 미디어가 없다면 <em>unknown</em> 을 리턴합니다.
@property (nonatomic, readonly) enum AdFitMediaType mediaType;
@property (nonatomic) BOOL isAccessibilityElement;
/// :nodoc:
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// 미디어 뷰에서 발생하는 비디오의 재생 및 사운드 관련 이벤트에 따른 사용자 지정 동작을 구현할 수 있습니다.
SWIFT_PROTOCOL("_TtP8AdFitSDK22AdFitMediaViewDelegate_")
@protocol AdFitMediaViewDelegate <NSObject>
@optional
/// 미디어 뷰에 표시된 비디오가 재생 되는 시점에 호출됩니다.
/// \param mediaView 재생이 시작된 비디오를 표시하고 있는 미디어 뷰 객체
///
- (void)mediaViewVideoDidPlay:(AdFitMediaView * _Nonnull)mediaView;
/// 미디어 뷰에 표시된 동영상이 일시정지 되는 시점에 호출됩니다.
/// \param mediaView 일시정지 된 비디오를 표시하고 있는 미디어 뷰 객체
///
- (void)mediaViewVideoDidPause:(AdFitMediaView * _Nonnull)mediaView;
/// 미디어 뷰에 표시된 동영상의 재생이 완료되는 시점에 호출됩니다.
/// \param mediaView 재생이 완료된 비디오를 표시하고 있는 미디어 뷰 객체
///
- (void)mediaViewVideoDidComplete:(AdFitMediaView * _Nonnull)mediaView;
/// 미디어 뷰에 표시된 비디오가 음소거 상태로 변경되는 시점에 호출됩니다.
/// \param mediaView 무음 상태로 변경된 비디오를 표시하고 있는 미디어 뷰 객체
///
- (void)mediaViewVideoDidMute:(AdFitMediaView * _Nonnull)mediaView;
/// 미디오 뷰에 표시된 비디오가 음소거 해제 상태로 변경되는 시점에 호출됩니다.
/// \param mediaView 음소거 해제된 비디오를 표시하고 있는 미디어 뷰 객체
///
- (void)mediaViewVideoDidUnmute:(AdFitMediaView * _Nonnull)mediaView;
@end


@protocol AdFitNativeAdDelegate;

/// 사용자 뷰에 네이티브 광고를 표시할 수 있도록, 광고 데이터 로드 및 바인딩 메서드를 제공합니다.
SWIFT_CLASS("_TtC8AdFitSDK13AdFitNativeAd")
@interface AdFitNativeAd : NSObject
/// 네이티브 광고의 delegate 객체.
@property (nonatomic, weak) id <AdFitNativeAdDelegate> _Nullable delegate;
/// 광고주 페이지를 표시할 때 사용될 부모 뷰 컨트롤러.<br>
/// 별도로 할당하지 않는 경우 SDK에서 자체적으로 가장 적당한 뷰 컨트롤러를 탐색하여 사용합니다.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// 네이티브 광고에 포함된 미디어 요소의 <code>가로 / 세로</code> 비율.<br>
/// 광고가 로드 되기 전의 값은 <em>0</em> 이며, 광고 로드 이후 실제 미디어의 비율로 변경됩니다.<br>
/// 만일 광고에 포함된 미디어 요소의 사이즈가 1200x628 이라면, <code>1.9108...</code> 값을 가지게 됩니다.
@property (nonatomic, readonly) CGFloat mediaAspectRatio;
/// 네이티브 광고에 포함된 미디어 요소의 타입.<br>
/// 기본값은 <em>unknown</em> 이며, 광고 로드 이후 실제 미디어의 타입으로 변경됩니다.
@property (nonatomic, readonly) enum AdFitMediaType mediaType;
/// 네이티브 광고에 포함된 광고 keyword. <br>
@property (nonatomic, readonly, copy) NSString * _Nullable keywords;
/// 네이티브 광고의 제목 텍스트.<br>
/// 기본값은 <em>nil</em> 이며, 광고 로드 이후 실제 제목 텍스트 값으로 변경됩니다.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// 네이티브 광고의 본문 텍스트.<br>
/// 기본값은 <em>nil</em> 이며, 광고 로드 이후 실제 본문 텍스트 값으로 변경됩니다.
@property (nonatomic, readonly, copy) NSString * _Nullable body;
/// 네이티브 광고의 프로필명 텍스트.<br>
/// 기본값은 <em>nil</em> 이며, 광고 로드 이후 실제 프로필명 텍스트 값으로 변경됩니다.
@property (nonatomic, readonly, copy) NSString * _Nullable profileName;
/// 네이티브 광고의 행동 유도 버튼 텍스트.<br>
/// 기본값은 <em>nil</em> 이며, 광고 로드 이후 실제 행동 유도 버튼 텍스트 값으로 변경됩니다.
@property (nonatomic, readonly, copy) NSString * _Nullable callToAction;
/// 네이티브 광고의 요청시 제공했던 광고 단위 아이디.<br>
@property (nonatomic, readonly, copy) NSString * _Nullable adUnitId;
/// 네이티브 광고에서 제공하는 커스텀 정보.<br>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull options;
@property (nonatomic, strong) UIView * _Nullable adInfoView;
/// Info Icon 미세 조정<br>
@property (nonatomic) CGFloat infoIconTopConstant;
@property (nonatomic) CGFloat infoIconBottomConstant;
@property (nonatomic) CGFloat infoIconLeftConstant;
@property (nonatomic) CGFloat infoIconRightConstant;
/// 네이티브 광고와 사용자 뷰를 바인딩 합니다.
/// note:
/// 이 메서드는 네이티브 광고가 로드 된 이후에 호출되어야 합니다. 광고 로드 이전에 호출되면 아무런 동작도 하지 않습니다.
/// note:
/// 이 메서드는 반드시 main queue 에서 사용해야 합니다.
/// \param nativeAdView 네이티브 광고를 표시할 뷰 객체. <code>AdFitNativeAdRenderable</code> 프로토콜을 구현해야 함
///
- (void)bind:(UIView * _Nonnull)nativeAdView;
/// 로드 된 광고가 현재 사용자에게 다시 노출되지 않도록 차단합니다.<br>
/// 한국 표준시(KST) 기준 익일 자정까지, 현재 광고의 광고주 계정에 속한 모든 광고가 차단됩니다.<br>
/// note:
/// 이 메서드는 네이티브 광고가 로드 된 이후에 호출되어야 합니다. 광고 로드 이전에 호출되면 아무런 동작도 하지 않습니다.
- (void)block;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 네이티브 광고에서 발생하는 광고 응답, 클릭 등의 이벤트에 따른 사용자 지정 동작을 구현할 수 있습니다.
SWIFT_PROTOCOL("_TtP8AdFitSDK21AdFitNativeAdDelegate_")
@protocol AdFitNativeAdDelegate <NSObject>
@optional
/// 네이티브 광고에서 사용자 클릭이 발생하였을 때 호출됩니다.<br>
/// 클릭에 의해 광고주 페이지가 전체 화면으로 노출되므로, 화면 전환시 필요한 동작이 있다면 이 메서드에 구현하세요.
/// \param nativeAd 클릭 이벤트가 발생한 네이티브 광고 객체
///
- (void)nativeAdDidClickAd:(AdFitNativeAd * _Nonnull)nativeAd;
@end

@protocol AdFitNativeAdLoaderDelegate;

SWIFT_CLASS("_TtC8AdFitSDK19AdFitNativeAdLoader")
@interface AdFitNativeAdLoader : NSObject
/// 네이티브 광고 배열.
@property (nonatomic, copy) NSArray<AdFitNativeAd *> * _Nonnull ads;
/// 네이티브 광고 배열의 첫번째 광고.
@property (nonatomic, readonly, strong) AdFitNativeAd * _Nullable firstAd;
/// 네이티브 광고 로더의 delegate 객체.
@property (nonatomic, weak) id <AdFitNativeAdLoaderDelegate> _Nullable delegate;
/// 광고주 페이지를 표시할 때 사용될 부모 뷰 컨트롤러.<br>
/// 별도로 할당하지 않는 경우 SDK에서 자체적으로 가장 적당한 뷰 컨트롤러를 탐색하여 사용합니다.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// 광고 뷰 내에서 정보 아이콘(<img src="https://t1.daumcdn.net/adfit/image/d_i_m_201607.png" width="20" valign="middle">)이 표시될 위치.<br>
/// 이 아이콘을 표시하기 위해 별다른 처리는 필요하지 않으며, 지정된 위치에 자동으로 표시됩니다.<br>
/// 기본값은 <em>topRight</em> (우측 상단) 입니다.
@property (nonatomic) enum AdFitInfoIconPosition infoIconPosition;
/// 네이티브 광고를 통해 받기 원하는 미디어 요소의 가로 길이.<br>
/// 이 프로퍼티를 지정하면, 광고 서버는 해당 길이에 맞게 미디어 요소의 크기를 최적화 하여 전달합니다.<br>
/// 기본값은 현재 기기가 세로 모드일 때의 가로 해상도입니다.
/// note:
/// 이 프로퍼티의 값은 반드시 논리 해상도 기준으로 설정해주세요. 레티나 기기의 2x, 3x 계산은 SDK 내부에서 자동으로 처리합니다.
/// <ul>
///   <li>
///     아이폰 6 미만: 320
///   </li>
///   <li>
///     아이폰 6 이상: 375
///   </li>
///   <li>
///     아이폰 PLUS 기기: 414
///   </li>
/// </ul>
@property (nonatomic) CGFloat desiredMediaWidth;
/// 네이티브 광고 객체를 초기화 합니다.
/// \param clientId 광고단위 ID
///
/// \param count 요청할 광고 개수, 기본값은 1.
///
///
/// returns:
/// <code>AdFitNativeAd</code> 객체
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId count:(NSInteger)count OBJC_DESIGNATED_INITIALIZER;
/// 네이티브 광고를 요청합니다.
/// note:
/// 한개의 <code>AdFitNativeAdLoader</code> 객체에서는 <code>loadAd</code> 메서드를 단 한 번만 호출할 수 있습니다.<br>
/// 광고 응답 성공 여부와 관계 없이, 한번 <code>loadAd</code> 메서드를 호출한 객체는 재사용이 불가능합니다.
- (void)loadAd;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 네이티브 광고 로더에서 발생하는 광고 응답, 실패 등의 이벤트에 따른 사용자 지정 동작을 구현할 수 있습니다.
SWIFT_PROTOCOL("_TtP8AdFitSDK27AdFitNativeAdLoaderDelegate_")
@protocol AdFitNativeAdLoaderDelegate <NSObject>
@optional
/// 네이티브 광고가 성공적으로 로드 되었을 때 호출됩니다.
/// \param nativeAds 광고가 로드된 네이티브 광고 객체의 배열
///
- (void)nativeAdLoaderDidReceiveAds:(NSArray<AdFitNativeAd *> * _Nonnull)nativeAds;
/// 네이티브 광고가 성공적으로 로드 되었을 때 호출됩니다.
/// 광고 단위 ID 1개 당 멀티 광고 요청이 아닌 1개의 광고를 사용할 경우 사용하세요.
/// \param nativeAd 광고가 로드된 네이티브 광고 객체
///
- (void)nativeAdLoaderDidReceiveAd:(AdFitNativeAd * _Nonnull)nativeAd;
/// 네이티브 광고 로드에 실패한 경우 호출됩니다.
/// \param nativeAdLoader 광고 로드에 실패한 네이티브 광고 로더 객체
///
/// \param error 광고 로드 실패의 원인이 된 에러 객체
///
- (void)nativeAdLoaderDidFailToReceiveAd:(AdFitNativeAdLoader * _Nonnull)nativeAdLoader error:(NSError * _Nonnull)error;
@end


/// 광고에 포함된 비디오의 재생 정책.
typedef SWIFT_ENUM(NSInteger, AdFitVideoPlayPolicy, open) {
/// 항상 수동으로 재생. 사용자가 재생 버튼을 눌러야만 재생됩니다.
  AdFitVideoPlayPolicyAlwaysManualPlay = 0,
/// 항상 자동으로 재생. 비디오 영역이 화면에 노출될 때 자동으로 재생이 시작됩니다.
  AdFitVideoPlayPolicyAlwaysAutoPlay = 1,
/// Wi-Fi 상태인 경우에만 자동으로 재생.
  AdFitVideoPlayPolicyAutoPlayOnWifiOnly = 2,
};


SWIFT_CLASS("_TtC8AdFitSDK12BizBoardCell")
@interface BizBoardCell : UITableViewCell
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
@end


@interface BizBoardCell (SWIFT_EXTENSION(AdFitSDK)) <AdFitNativeAdRenderable>
- (UILabel * _Nullable)adTitleLabel SWIFT_WARN_UNUSED_RESULT;
- (UIButton * _Nullable)adCallToActionButton SWIFT_WARN_UNUSED_RESULT;
- (UILabel * _Nullable)adProfileNameLabel SWIFT_WARN_UNUSED_RESULT;
- (UIImageView * _Nullable)adProfileIconView SWIFT_WARN_UNUSED_RESULT;
- (AdFitMediaView * _Nullable)adMediaView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8AdFitSDK16BizBoardTemplate")
@interface BizBoardTemplate : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


@interface BizBoardTemplate (SWIFT_EXTENSION(AdFitSDK)) <AdFitNativeAdRenderable>
- (UILabel * _Nullable)adTitleLabel SWIFT_WARN_UNUSED_RESULT;
- (UIButton * _Nullable)adCallToActionButton SWIFT_WARN_UNUSED_RESULT;
- (UILabel * _Nullable)adProfileNameLabel SWIFT_WARN_UNUSED_RESULT;
- (UIImageView * _Nullable)adProfileIconView SWIFT_WARN_UNUSED_RESULT;
- (AdFitMediaView * _Nullable)adMediaView SWIFT_WARN_UNUSED_RESULT;
@end





SWIFT_CLASS("_TtC8AdFitSDK17PlainNativeAdView")
@interface PlainNativeAdView : UIView <AdFitNativeAdRenderable>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (UILabel * _Nullable)adTitleLabel SWIFT_WARN_UNUSED_RESULT;
- (UIButton * _Nullable)adCallToActionButton SWIFT_WARN_UNUSED_RESULT;
- (UILabel * _Nullable)adProfileNameLabel SWIFT_WARN_UNUSED_RESULT;
- (UIImageView * _Nullable)adProfileIconView SWIFT_WARN_UNUSED_RESULT;
- (AdFitMediaView * _Nullable)adMediaView SWIFT_WARN_UNUSED_RESULT;
@end

















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
